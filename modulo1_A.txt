//cliente VS server | roda client VS roda servidor
// jornalista(html/conteúdo) Designer(CSS/layoult) Programador(js*/interação cliente) }client  *é linguagem

// inspecionar > debugger > disable js
//>alterar js que chegou na máquina

//1970>DARPA>EUA>rede proteção(Arpanet)> Internet
//1993>Inglaterra> TimBernes (html/http/WWW)> CERN
//Mark Anderson Mosaic
//1994 Anderson+Clark: NetScape> Mozila
//1995 Brendon Nike> Mocka (também estava nascendo Java)> pegaram boom: Mocka para JavaScript
//1997 Netscape procura ecma para padronizar js > ecmascript
//2002 (encerra treta Microsoft VS Netscape) > Netscape fale e criam org Mozilla
//2008 > Google Chrome 2009 Motor V8 para rodar Js
//2010> NodeJs máquina que roda js fora do navegador.

//Framworks Js: Jquery(lib), Angular(google), React(facebook), Vue(ex programador Google)
//Possível jogos com Js (+libs)

Linguagem marcação, lingugagem estilo, linguagem programação

Estacionamento VS Terreno VS Computador
Vagas VS variáveis (var, let, =null)

= "Luva de Pedreiro"

TIPOS ASPAS:
"(dupla)
'(simples)
`(crase)

Var/Let: 
-começa com letra, sem espaço, pode ter cifrão $.
-case sensitive ("a" != "A")

Terminal:
>node chama >.exit 

ATENÇÃO: 
-number (abarca int e float) NaN
-numero com . são strings.
.typeof n
-js null é objeto
-arrays sao object em js

"Symbol" 


NÚMERO(number)


string

window.prompt => retorna string

      //number + number > faz adição
      //string + string > faz concatenação
      // no js pode usar somente Number ou Number.parseFloat(se precisar)
      // para string: String(n) OU n.toString()

FORMATANDO strings

var s='JavaScript'
`Eu estou aprendendo ${s}`(placeholder) CRASE (botão ao lado de "{")

LEMBRAR: "Case Sensitive"

Trabalhando com Strings
s.lenght
s.toUpperCase() => lembrar de colocar ()
s.toLowerCase() => lembrar de colocar ()

FORMATANDO NÚMERO

n1.toFixed(2) => duas casas decimais.
n1.toFixed(2).replace(".", ",")

n1.toLocaleString('pt-BR', {syle: 'currency', currency: 'BRL'})

OPERADORES
-aritméticos
-atribuição
-relacionais
-lógicos
-ternário
(tem mais)

ARITMÉTICOS 
5/2=2.5 (para js considera o real)
5%2=1 (resto divisão inteira)
5**2=25


n=n+4 > n+=4
n=n*4 > n*=4
++n ou --n (pré e pós processamento)

b++=b+1

RELACIONAIS
 >>primeiro faz o aritméticos e depois os relacionais.

5==5 (true)
5=='5' (true) //pro js isso é true
5==='5' (false) //operador identidade (===igualdade restrita)

0 ==false (true):
      Js é fracamente tipada (converte tipos automaticamente) > força e deixa false=0 e True=1
null == undefined (true)
nul === undefined (false)
'0'==false(true)
[] == false (true)
[] === false (false)

LOGICOS
!
&& (e) 
|| (ou=disjunção)


PRECEDÊNCIA
1ºAritméticos (respeita ordem dos aritméticos)
2ºRelacionais (ordem de aparição)
3ºLógicos sempre na ordem: Não(!), E(&&), OU(||)

"Primeiro faz as contas para saber se é possível manter uma casa,
Depois em segundo lugar vê se há uma relação para morar junto
Por último verifica se tem lógica estabelecer tudo isso agora."


TERNARIO
?: > teste?true:false
